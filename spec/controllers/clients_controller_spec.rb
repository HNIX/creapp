require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ClientsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Client. As you add validations to Client, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ClientsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before :each do
    @user = FactoryGirl.create(:user_checked_terms)
    sign_in(@user)
  end

  describe 'GET new' do
    it 'should assign @client and render view' do
      get :new, user_id: @user.id
      assigns(:client).user_id.should eq(@user.id)
      response.should render_template('new')
    end

    it 'should redirect to edit if client exists' do
      FactoryGirl.create(:client, user: @user)
      get :new, user_id: @user.id
      response.should redirect_to(action: :edit)
    end

    it 'should fail when the user has not checked terms' do
      @user.checked_terms = false
      @user.save(validate: false)
      get :new, user_id: @user.id
      response.should redirect_to(edit_user_path(@user))
    end
  end

  describe 'POST create' do
    it 'should ignore the user_id parameter and create the client' do
      post :create, user_id: @user.id, client: {user_id: 'ignore', company: 'Test Company', description: 'Test Company Description'}
      response.should redirect_to(programmers_path)
      client = Client.find_by_user_id(@user.id)
      flash[:notice].should eq('Your client account has been created.')
      client.user_id.should eq(@user.id)
      client.company.should eq('Test Company')
      client.description.should eq('Test Company Description')
    end

    it 'should fail create if the parameters passed in are invalid' do
      post :create, user_id: @user.id, client: {company: 's'}
      response.should render_template('new')
      flash[:alert].should eq('Your client account could not be created.')
      assigns(:client).errors[:company].should eq(['is too short (minimum is 2 characters)'])
      assigns(:client).company.should eq('s')
    end
  end

  describe 'GET edit' do
    before :each do
      @client = FactoryGirl.create(:client, user: @user, company: 'Test Company')
    end

    it 'should assign @client and render view' do
      get :edit, user_id: @user.id
      assigns(:client).user_id.should eq(@user.id)
      response.should render_template('edit')
    end

    it 'should fail when the user has not checked terms' do
      @user.checked_terms = false
      @user.save(validate: false)
      get :edit, user_id: @user.id
      response.should redirect_to(edit_user_path(@user))
    end
  end

  describe 'POST update' do
    before :each do
      @client = FactoryGirl.create(:client, user: @user, company: 'Test Company')
    end

    it 'should ignore the user_id parameter and update the client' do
      post :update, user_id: @user.id, id: @client.id, client: {company: 'Test Company', description: 'New Description'}
      response.should render_template('edit')
      client = Client.find_by_user_id(@user.id)
      flash[:notice].should eq('Your client account has been updated.')
      client.user_id.should eq(@user.id)
      client.description.should eq('New Description')
    end

    it 'should fail update if the parameters passed in are invalid' do
      post :update, user_id: @user.id, id: @client.id, client: {company: 's', description: 'New Description'}
      response.should render_template('edit')
      flash[:alert].should eq('Your client account could not be updated.')
      assigns(:client).errors[:company].should eq(['is too short (minimum is 2 characters)'])
      assigns(:client).company.should eq('s')
      @client.reload.company.should eq('Test Company')
    end
  end

end

